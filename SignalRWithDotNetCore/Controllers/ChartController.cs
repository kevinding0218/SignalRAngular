using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.SignalR;
using SignalRWithDotNetCore.DataStorage;
using SignalRWithDotNetCore.HubConfig;
using SignalRWithDotNetCore.TimerFeatures;

namespace SignalRWithDotNetCore.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ChartController : ControllerBase
    {
        /*
         * We are using the IHubContext interface to create its instance via dependency injection. 
         * By using that instance object, we are able to access and call the hub methods. 
         * This is the reason why we don’t have any method in our ChartHub class. 
         * We don’t need any yet, because we are providing just one-way communication (server is sending data to the client only), 
         * and we can access all the hub methods with IHubContext interface.
         */
        private IHubContext<ChartHub> _hub;

        public ChartController(IHubContext<ChartHub> hub)
        {
            _hub = hub;
        }

        public IActionResult Get()
        {
            /*
             * We are instantiating the TimerManager class and providing a callback function as a parameter. 
             * This callback function will be executed every two seconds.
             * 
             * We have to pay attention to the _hub.Clients.All.SendAsync("transferchartdata", DataManager.GetData()) expression. 
             * With it, we are sending generated data to all subscribed clients on the transferchartdata event. 
             * This means that every client if it has a listener on the transferchartdata event, will receive a data generated by the DataManager class.
             */
            var timerManager = new TimerManager(() => _hub.Clients.All.SendAsync("transferchartdata", DataManager.GetData()));

            return Ok(new { Message = "Request Completed" });
        }
    }
}